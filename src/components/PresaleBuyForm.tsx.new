"use client";

import React, { useState, useEffect } from "react";
import { motion } from "framer-motion";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { ArrowRight, Wallet, RefreshCcw, Loader2, ExternalLink } from "lucide-react";
import { WalletSelectorButton } from "@/components/WalletSelectorButton";
import { useWallet } from "@solana/wallet-adapter-react";
import { useEthereumWallet } from "@/components/providers/wallet-provider";
import usePresale from "@/components/hooks/usePresale";
import { useBscPresale } from "@/components/hooks/useBscPresale";
import GlowButton from "@/components/GlowButton";
import { toast } from "sonner";

interface PresaleBuyFormProps {
  referralCode?: string;
  className?: string;
}

const PresaleBuyForm: React.FC<PresaleBuyFormProps> = ({
  referralCode,
  className = "",
}) => {
  const { connected: solanaConnected, publicKey } = useWallet();
  const { isConnected: ethConnected, address } = useEthereumWallet();
  const [customReferralCode, setCustomReferralCode] = useState<string>(referralCode || "");
  const [tokenAmount, setTokenAmount] = useState<number>(100);
  const [network, setNetwork] = useState<"bsc" | "solana">("bsc");
  const [isLoading, setIsLoading] = useState(false);
  const [presaleStatus, setPresaleStatus] = useState<any>(null);
  
  // Use wagmi hook for BSC purchases
  const { buyTokens: buyOnBsc, isLoading: isBscTxLoading } = useBscPresale(tokenAmount, customReferralCode);
  
  // Calculate estimated cost
  const estimatedCost = presaleStatus
    ? (tokenAmount * parseFloat(presaleStatus.tokenPrice)).toFixed(6)
    : "0";

  // Get currency symbol based on network
  const currencySymbol = network === "bsc" ? "BNB" : "SOL";
  
  // Check wallet connection status
  const hasBscWalletConnected = ethConnected;
  const hasSolanaWalletConnected = solanaConnected;
  
  // Load presale data
  useEffect(() => {
    const loadPresaleData = async () => {
      setIsLoading(true);
      try {
        // For demo purposes, we'll use mock data
        // In a real implementation, this would fetch from the blockchain
        setPresaleStatus({
          isActive: true,
          hardCap: "10000000",
          minPurchase: "50",
          maxPurchase: "10000",
          tokenPrice: "0.0001",
          soldTokens: "2500000",
          totalRaised: "250",
          percentageSold: 25,
        });
      } catch (error) {
        console.error("Error loading presale data:", error);
        toast.error("Failed to load presale data");
      } finally {
        setIsLoading(false);
      }
    };
    
    loadPresaleData();
  }, [network]);
  
  // Handle token amount change with validation
  const handleAmountChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = parseFloat(e.target.value);
    if (isNaN(value) || value < 0) {
      setTokenAmount(0);
    } else {
      setTokenAmount(value);
    }
  };
  
  // Handle network switching
  const switchNetwork = (newNetwork: "bsc" | "solana") => {
    setNetwork(newNetwork);
  };
  
  // Handle buy button click
  const handleBuy = async () => {
    if (!presaleStatus?.isActive) {
      toast.error("Presale is not active");
      return;
    }

    const minPurchase = parseFloat(presaleStatus.minPurchase);
    const maxPurchase = parseFloat(presaleStatus.maxPurchase);

    if (tokenAmount < minPurchase) {
      toast.error(`Minimum purchase amount is ${minPurchase} tokens`);
      return;
    }

    if (tokenAmount > maxPurchase) {
      toast.error(`Maximum purchase amount is ${maxPurchase} tokens`);
      return;
    }
    
    try {
      if (network === "bsc") {
        // Buy on BSC using wagmi hooks
        buyOnBsc?.();
      } else if (network === "solana") {
        // Buy on Solana (implement this part)
        toast.info("Solana purchase functionality not yet implemented");
      }
    } catch (error) {
      console.error("Error buying tokens:", error);
      toast.error("Failed to purchase tokens");
    }
  };

  // Refresh data
  const refreshData = () => {
    // Re-fetch presale status
    setIsLoading(true);
    setTimeout(() => {
      setIsLoading(false);
      toast.success("Presale data refreshed");
    }, 1000);
  };
  
  return (
    <div
      className={`bg-black/30 backdrop-blur-md rounded-xl p-6 border border-primary/10 ${className}`}
    >
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-2xl font-semibold text-white">Buy Tokens</h2>

        <button
          onClick={refreshData}
          className="text-primary hover:text-primary/80 transition-colors"
          title="Refresh presale data"
          disabled={isLoading}
        >
          {isLoading ? (
            <Loader2 className="h-5 w-5 animate-spin" />
          ) : (
            <RefreshCcw className="h-5 w-5" />
          )}
        </button>
      </div>

      {isLoading ? (
        <div className="py-8 flex flex-col items-center justify-center">
          <Loader2 className="h-8 w-8 animate-spin text-primary mb-2" />
          <p className="text-primary/70 text-center">Loading presale data...</p>
        </div>
      ) : (
        <>
          {/* Network Selection */}
          <div className="mb-6">
            <Label
              htmlFor="network"
              className="text-sm text-white/70 block mb-2"
            >
              Select Network
            </Label>
            <div className="grid grid-cols-2 gap-3">
              <button
                type="button"
                onClick={() => switchNetwork("bsc")}
                className={`p-3 rounded-md flex items-center justify-center gap-2 transition-all ${
                  network === "bsc"
                    ? "bg-gradient-to-r from-amber-600/30 to-amber-500/30 border border-amber-500/50 text-amber-200"
                    : "bg-black/20 border border-white/5 text-white/70 hover:bg-black/30"
                }`}
              >
                <div className="w-4 h-4 rounded-full bg-gradient-to-r from-amber-500 to-yellow-500" />
                <span>BSC {hasBscWalletConnected ? "✓" : ""}</span>
              </button>

              <button
                type="button"
                onClick={() => switchNetwork("solana")}
                className={`p-3 rounded-md flex items-center justify-center gap-2 transition-all ${
                  network === "solana"
                    ? "bg-gradient-to-r from-purple-600/30 to-blue-500/30 border border-blue-500/50 text-blue-200"
                    : "bg-black/20 border border-white/5 text-white/70 hover:bg-black/30"
                }`}
              >
                <div className="w-4 h-4 rounded-full bg-gradient-to-r from-purple-500 to-blue-500" />
                <span>Solana {hasSolanaWalletConnected ? "✓" : ""}</span>
              </button>
            </div>
          </div>

          {/* Wallet Connection Status */}
          <div className="mb-6 p-4 bg-black/40 rounded-lg border border-primary/10">
            <div className="flex justify-between items-center mb-3">
              <div className="text-left">
                <p className="text-white/70 text-sm mb-1">BSC Wallet:</p>
                <p className={`text-sm ${hasBscWalletConnected ? 'text-green-400' : 'text-red-400'}`}>
                  {hasBscWalletConnected ? 'Connected' : 'Not Connected'}
                </p>
              </div>
              <div className="text-right">
                <p className="text-white/70 text-sm mb-1">Solana Wallet:</p>
                <p className={`text-sm ${hasSolanaWalletConnected ? 'text-green-400' : 'text-red-400'}`}>
                  {hasSolanaWalletConnected ? 'Connected' : 'Not Connected'}
                </p>
              </div>
            </div>
            <WalletSelectorButton variant="fancy" className="mx-auto" />
          </div>

          {/* Token Purchase Form - Always show form info even when wallet is not connected */}
          {presaleStatus && (
            <>
              <div className="mb-6">
                <Label
                  htmlFor="amount"
                  className="text-sm text-white/70 block mb-2"
                >
                  Token Amount
                </Label>
                <div className="flex gap-2 items-center">
                  <Input
                    id="amount"
                    type="number"
                    value={tokenAmount}
                    onChange={handleAmountChange}
                    className="bg-black/30 border border-primary/20 text-white"
                    min={presaleStatus.minPurchase}
                    max={presaleStatus.maxPurchase}
                  />
                  <div className="bg-black/40 px-3 py-2 rounded-md text-white/80">
                    LMX
                  </div>
                </div>
                <div className="flex justify-between text-xs text-white/60 mt-1 px-1">
                  <span>Min: {presaleStatus.minPurchase}</span>
                  <span>Max: {presaleStatus.maxPurchase}</span>
                </div>
              </div>

              <div className="mb-6">
                <Label
                  htmlFor="cost"
                  className="text-sm text-white/70 block mb-2"
                >
                  Estimated Cost
                </Label>
                <div className="bg-black/30 border border-primary/20 rounded-md p-3 flex justify-between">
                  <span className="text-white">{estimatedCost}</span>
                  <span className="text-primary">{currencySymbol}</span>
                </div>
              </div>

              <div className="mb-6">
                <Label
                  htmlFor="referral"
                  className="text-sm text-white/70 block mb-2"
                >
                  Referral Code (Optional)
                </Label>
                <Input
                  id="referral"
                  type="text"
                  value={customReferralCode}
                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => setCustomReferralCode(e.target.value)}
                  className="bg-black/30 border border-primary/20 text-white"
                  placeholder="Enter referral code"
                />
              </div>

              <div className="mb-4">
                <GlowButton
                  onClick={handleBuy}
                  disabled={
                    isBscTxLoading || 
                    !presaleStatus.isActive || 
                    (network === "bsc" && !hasBscWalletConnected) ||
                    (network === "solana" && !hasSolanaWalletConnected)
                  }
                  className="w-full py-3"
                >
                  {isBscTxLoading ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      Processing...
                    </>
                  ) : (network === "bsc" && !hasBscWalletConnected) ? (
                    <>
                      Connect BSC Wallet
                      <Wallet className="ml-2 h-4 w-4" />
                    </>
                  ) : (network === "solana" && !hasSolanaWalletConnected) ? (
                    <>
                      Connect Solana Wallet
                      <Wallet className="ml-2 h-4 w-4" />
                    </>
                  ) : (
                    <>
                      Buy Tokens on {network === "bsc" ? "BSC" : "Solana"}
                      <ArrowRight className="ml-2 h-4 w-4" />
                    </>
                  )}
                </GlowButton>
              </div>

              {/* Presale Progress and Info */}
              <div className="mt-6">
                <div className="bg-black/20 p-3 rounded-md mb-3">
                  <div className="flex justify-between text-sm mb-1">
                    <span className="text-white/70">Token Price:</span>
                    <span className="text-white">
                      {presaleStatus.tokenPrice} {currencySymbol}
                    </span>
                  </div>
                  <div className="flex justify-between text-sm">
                    <span className="text-white/70">Tokens Sold:</span>
                    <span className="text-white">
                      {presaleStatus.soldTokens} / {presaleStatus.hardCap} LMX
                    </span>
                  </div>
                </div>

                {/* Progress bar */}
                <div className="h-2 bg-white/10 rounded-full overflow-hidden mb-2">
                  <motion.div
                    className="h-full bg-gradient-to-r from-primary/60 to-primary"
                    initial={{ width: "0%" }}
                    animate={{ width: `${presaleStatus.percentageSold}%` }}
                    transition={{ duration: 1 }}
                  />
                </div>
                <div className="text-right text-xs text-primary">
                  {presaleStatus.percentageSold.toFixed(2)}% sold
                </div>
              </div>
            </>
          )}
        </>
      )}
    </div>
  );
};

export default PresaleBuyForm;
