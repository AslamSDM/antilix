generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 String              @id @default(cuid())
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  email              String?             @unique
  username           String?             @unique
  password           String?
  walletAddress      String?
  walletType         String?
  walletVerified     Boolean             @default(false)
  evmAddress         String?             @unique
  solanaAddress      String?             @unique
  referralCode       String              @unique
  referrerId         String?
  verified           Boolean             @default(false)
  evmVerified        Boolean             @default(false)
  solanaVerified     Boolean             @default(false)
  purchases          Purchase[]
  referrer           User?               @relation("UserReferrals", fields: [referrerId], references: [id])
  referrals          User[]              @relation("UserReferrals")
  verificationTokens VerificationToken[]
}

model VerificationToken {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  token     String    @unique
  expires   DateTime
  userId    String
  type      TokenType
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Purchase {
  id                   String         @id @default(cuid())
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  userId               String
  network              NetworkType
  paymentAmount        Decimal
  paymentCurrency      String
  lmxTokensAllocated   Decimal
  pricePerLmxInUsdt    Decimal
  transactionSignature String         @unique
  status               PurchaseStatus @default(PENDING)
  referralBonusPaid    Boolean        @default(false)
  roundId              String         @default("seed")
  user                 User           @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([transactionSignature])
}

enum TokenType {
  EMAIL_VERIFICATION
  EVM_VERIFICATION
  SOLANA_VERIFICATION
  PASSWORD_RESET
}

enum NetworkType {
  SOLANA
  BSC
}

enum PurchaseStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
