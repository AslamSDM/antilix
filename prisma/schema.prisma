// This is the updated schema.prisma that you'll need to migrate later

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 String               @id @default(cuid())
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  email              String?              @unique
  username           String?
  password           String?
  emailVerified      DateTime? // Added this field for email verification
  walletAddress      String?
  walletType         String?
  walletVerified     Boolean              @default(false)
  evmAddress         String?
  solanaAddress      String?
  referralCode       String               @unique
  referrerId         String?
  verified           Boolean              @default(false)
  evmVerified        Boolean              @default(false)
  solanaVerified     Boolean              @default(false)
  purchases          Purchase[]
  transactions       Transaction[]
  referrer           User?                @relation("UserReferrals", fields: [referrerId], references: [id])
  referrals          User[]               @relation("UserReferrals")
  verificationTokens VerificationToken[]
  passwordResets     PasswordResetToken[] // Added for password reset relation
}

model VerificationToken {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  token     String    @unique
  expires   DateTime
  userId    String
  type      TokenType
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// Added this model for password reset
model PasswordResetToken {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  token     String   @unique
  expires   DateTime
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Purchase {
  id                   String         @id @default(cuid())
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  userId               String
  network              NetworkType
  paymentAmount        Decimal
  paymentCurrency      String
  lmxTokensAllocated   Decimal
  pricePerLmxInUsdt    Decimal
  transactionSignature String         @unique
  status               PurchaseStatus @default(PENDING)
  referralBonusPaid    Boolean        @default(false)
  roundId              String         @default("seed")
  transactionId        String?        @unique
  user                 User           @relation(fields: [userId], references: [id])
  Transaction          Transaction[]

  @@index([userId])
  @@index([transactionSignature])
}

enum TokenType {
  EMAIL_VERIFICATION
  EVM_VERIFICATION
  SOLANA_VERIFICATION
  PASSWORD_RESET
}

enum NetworkType {
  SOLANA
  BSC
}

enum PurchaseStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model Transaction {
  id              String            @id @default(cuid())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  userId          String
  network         NetworkType
  hash            String            @unique
  status          TransactionStatus @default(PENDING)
  lastChecked     DateTime          @default(now())
  checkCount      Int               @default(0)
  tokenAmount     Decimal
  paymentAmount   Decimal
  paymentCurrency String
  user            User              @relation(fields: [userId], references: [id])
  Purchase        Purchase?         @relation(fields: [purchaseId], references: [id])
  purchaseId      String?

  @@index([userId])
  @@index([hash])
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}
